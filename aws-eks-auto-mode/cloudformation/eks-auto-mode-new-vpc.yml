Description: 'EKS Cluster for Dremio (EKS Auto Mode)'
Parameters:
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CIDR for public subnet 01 within the VPC
  PublicSubnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CIDR for public subnet 02 within the VPC
  PrivateSubnet01Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CIDR for private subnet 01 within the VPC
  PrivateSubnet02Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CIDR for private subnet 02 within the VPC
  EksVersion:
    Type: String
    Description: "AWS EKS Version."
    Default: "1.32"
  EksServiceIpv4Cidr:
    Type: String
    Description: "AWS EKS Service CIDR. (use the default if unclear)"
    Default: "10.100.0.0/16"
  EksPublicEndpoint:
    Type: String
    Description: "AWS EKS Public Endpoint"
    Default: true
    AllowedValues: [true, false]
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
      -
        Label:
          default: EKS Cluster for Dremio (EKS Auto Mode)
        Parameters:
          - EksVersion
          - EksServiceIpv4Cidr
          - EksPublicEndpoint
    ParameterLabels:
      EksVersion:
        default: "EKS Version"
      EksServiceIpv4Cidr:
        default: "EKS Service IPv4 CIDR"
      EksPublicEndpoint:
        default: "If EKS KubeAPI will provide a public endpoint."
      VpcBlock:
        default: "VPC CIDR"
      PublicSubnet01Block:
        default: "Public Subnet 01 CIDR"
      PublicSubnet02Block:
        default: "Public Subnet 02 CIDR"
      PrivateSubnet01Block:
        default: "Private Subnet 01 CIDR"
      PrivateSubnet02Block:
        default: "Private Subnet 02 CIDR"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public
  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ1
        - Key: Network
          Value: Private01
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Subnet AZ2
        - Key: Network
          Value: Private02
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01
  PrivateRoute02:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02
  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nat-gw-az01'
  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nat-gw-az02'
  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet01"
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet02"
        - Key: kubernetes.io/role/elb
          Value: 1
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet02"
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01
  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
  IAMRoleAmazonEKSAutoClusterRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy
        - arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy
        - arn:aws:iam::aws:policy/AmazonEKSComputePolicy
      MaxSessionDuration: 3600
      RoleName: !Join ["-", ["AmazonEKSAutoClusterRole", !Ref "AWS::StackName"]]
      Description: Allows access to other AWS service resources that are required to
        operate Auto Mode clusters managed by EKS.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
              - sts:TagSession
            Effect: Allow
            Principal:
              Service: eks.amazonaws.com
  IAMRoleAmazonEKSAutoNodeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      MaxSessionDuration: 3600
      RoleName: !Join ["-", ["AmazonEKSAutoNodeRole", !Ref "AWS::StackName"]]
      Description: Allows EKS nodes to connect to EKS Auto Mode clusters and to pull
        container images from ECR.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      ComputeConfig:
        Enabled: true
        NodeRoleArn: !GetAtt IAMRoleAmazonEKSAutoNodeRole.Arn
        NodePools:
          - system
          - general-purpose
      UpgradePolicy:
        SupportType: STANDARD
      StorageConfig:
        BlockStorage:
          Enabled: true
      Version: !Ref EksVersion
      ZonalShiftConfig:
        Enabled: true
      AccessConfig:
        AuthenticationMode: API
      EncryptionConfig: []
      KubernetesNetworkConfig:
        ServiceIpv4Cidr: !Ref EksServiceIpv4Cidr
        ElasticLoadBalancing:
          Enabled: true
        IpFamily: ipv4
      RoleArn: !GetAtt IAMRoleAmazonEKSAutoClusterRole.Arn
      ResourcesVpcConfig:
        EndpointPublicAccess: !Ref EksPublicEndpoint
        PublicAccessCidrs:
          - 0.0.0.0/0
        SecurityGroupIds: []
        SubnetIds:
          - !GetAtt 'PrivateSubnet01.SubnetId'
          - !GetAtt 'PrivateSubnet02.SubnetId'
        EndpointPrivateAccess: true
      Name: !Ref "AWS::StackName"
  S3BucketDremioDist:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Join ["-", [!Ref "AWS::StackName", "dist"]]
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateRouteTable01
        - !Ref PrivateRouteTable02
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpce-s3"

Outputs:
  ClusterName:
    Description: EKS cluster name
    Value: !Ref AWS::StackName
  ClusterCredentialsCommand:
    Description: The command to retrieve the cluster credentials
    Value: !Sub aws eks update-kubeconfig --region ${AWS::Region} --name ${AWS::StackName}
  DremioDistributedStorageBucket:
    Description: Dremio distributed storage bucket name (please put into Helm values.yml)
    Value: !Sub ${AWS::StackName}-dist
  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
  VpcID:
    Description: The VPC ID
    Value: !Ref VPC